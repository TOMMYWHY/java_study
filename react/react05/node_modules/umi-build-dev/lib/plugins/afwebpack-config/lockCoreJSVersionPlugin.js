"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _umiUtils() {
  const data = require("umi-utils");

  _umiUtils = function _umiUtils() {
    return data;
  };

  return data;
}

function types() {
  const data = _interopRequireWildcard(require("@babel/types"));

  types = function types() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const coreJSPath = (0, _path().dirname)(require.resolve('core-js/package.json'));

function isUmiCoreJSPolyfill(oFilename, identifier) {
  const filename = (0, _umiUtils().winPath)(oFilename);
  return (filename.endsWith('.umi/polyfills.js') || filename.endsWith('.umi-production/polyfills.js')) && identifier.startsWith('core-js/');
}

function getReplacedCoreJSPath(path) {
  return path.replace('core-js/', `${coreJSPath}/`);
}

function _default() {
  return {
    visitor: {
      // handle import statements
      ImportDeclaration(path, state) {
        const callPathNode = path.node;

        if (types().isLiteral(callPathNode.source) && isUmiCoreJSPolyfill(state.filename, callPathNode.source.value)) {
          callPathNode.source.value = getReplacedCoreJSPath(callPathNode.source.value);
        }
      },

      // handle require statements
      CallExpression(path, state) {
        const callPathNode = path.node;

        if (types().isIdentifier(callPathNode.callee) && callPathNode.callee.name === 'require' && types().isStringLiteral(callPathNode.arguments[0]) && isUmiCoreJSPolyfill(state.filename, callPathNode.arguments[0].value)) {
          callPathNode.arguments[0].value = getReplacedCoreJSPath(callPathNode.arguments[0].value);
        }
      }

    }
  };
}